AWSTemplateFormatVersion: 2010-09-09
Parameters:
  RHELCurrentAMI:
    Type: String
    Description: RHEL Current AMI Id
    AllowedPattern: "^ami-[a-z0-9]{17}$"
    Default: ami-0103f211a154d64a6
  RHELPreviousAMI:
    Type: String
    Description: RHEL Previous AMI Id
    AllowedPattern: "^ami-[a-z0-9]{17}$"
    Default: ami-0103f211a154d64a6
  EKSCurrentAMI:
    Type: String
    Description: EKS Current AMI Id
    AllowedPattern: "^ami-[a-z0-9]{17}$"
    Default: ami-0103f211a154d64a6
  EKSPreviousAMI:
    Type: String
    Description: EKS Previous AMI Id
    AllowedPattern: "^ami-[a-z0-9]{17}$"
    Default: ami-0103f211a154d64a6
  LustreCurrentAMI:
    Type: String
    Description: Lustre Current AMI Id
    AllowedPattern: "^ami-[a-z0-9]{17}$"
    Default: ami-0103f211a154d64a6
  LustrePreviousAMI:
    Type: String
    Description: Lustre Previous AMI Id
    AllowedPattern: "^ami-[a-z0-9]{17}$"
    Default: ami-0103f211a154d64a6
  ForensicCurrentAMI:
    Type: String
    Description: Forensic Current AMI Id
    AllowedPattern: "^ami-[a-z0-9]{17}$"
    Default: ami-0103f211a154d64a6
  ForensicPreviousAMI:
    Type: String
    Description: Forensic Previous AMI Id
    AllowedPattern: "^ami-[a-z0-9]{17}$"
    Default: ami-0103f211a154d64a6
  ReleaseDateRHELCurrentAMI:
    Type: String
    Description: ReleaseDate of RHEL Current AMI Id, allowed pattern YYYY-MM-DD.
    AllowedPattern: "^202[3-9]-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$"
    Default: "2023-04-07"
  ReleaseDateRHELPreviousAMI:
    Type: String
    Description: ReleaseDate of RHEL Previous AMI Id,, allowed pattern YYYY-MM-DD.
    AllowedPattern: "^202[3-9]-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$"
    Default: "2023-04-07"
  ReleaseDateEKSCurrentAMI:
    Type: String
    Description: ReleaseDate of EKS Current AMI Id, allowed pattern YYYY-MM-DD.
    AllowedPattern: "^202[3-9]-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$"
    Default: "2023-04-07"
  ReleaseDateEKSPreviousAMI:
    Type: String
    Description: ReleaseDate of EKS Previous AMI Id, allowed pattern YYYY-MM-DD.
    AllowedPattern: "^202[3-9]-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$"
    Default: "2023-04-07"
  ReleaseDateLustreCurrentAMI:
    Type: String
    Description: ReleaseDate of Lustre Current AMI Id, allowed pattern YYYY-MM-DD.
    AllowedPattern: "^202[3-9]-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$"
    Default: "2023-04-07"
  ReleaseDateLustrePreviousAMI:
    Type: String
    Description: ReleaseDate of Lustre Previous AMI Id, allowed pattern YYYY-MM-DD.
    AllowedPattern: "^202[3-9]-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$"
    Default: "2023-04-07"
  ReleaseDateForensicCurrentAMI:
    Type: String
    Description: ReleaseDate of Forensic Current AMI Id, allowed pattern YYYY-MM-DD.
    AllowedPattern: "^202[3-9]-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$"
    Default: "2023-04-07"
  ReleaseDateForensicPreviousAMI:
    Type: String
    Description: ReleaseDate of Forensic Previous AMI Id, allowed pattern YYYY-MM-DD.
    AllowedPattern: "^202[3-9]-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$"
    Default: "2023-04-07"
  VisibilityTimeout:
    Description: This should be longer than the time it would take to process and delete a message, this should not exceed 12 hours
    Type: Number
    Default: 900
  AMIRepaveKMSKeyName:
    Type: String
    Description: KMS Key to encrypt Lambda Environment variables, SQS Messages.
    Default: AMIRepaveEncryptionKey
  AMIRepaveSQSName:
    Type: String
    Description: Lambda sends/receives messages of ASGNames to Queue
    Default: AMIRepaveLambdaQueue
  AMIRepaveDLQName:
    Type: String
    Description: DLQ for Lambda Queue
    Default: AMIRepaveLambdaQueue-DLQ
  LambdaDLQName:
    Type: String
    Description: AMI-Repave Lambda DLQ Name
    Default: Lambda-DLQ

Resources:
  RHELCurrentAMIParameter:
    Type: AWS::SSM::Parameter
    Properties:
      DataType: aws:ec2:image
      Description: RHEL Current AMI ID
      AllowedPattern: "^ami-[a-z0-9]{17}$"
      Name: /cti/ami/ami-ids/rhel-current
      Type: String
      Value: 
        Ref: RHELCurrentAMI
  RHELCurrentAMIReleaseDateParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: RHEL Current AMI ID
      AllowedPattern: "^202[3-9]-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$"
      Name: /cti/ami/release-dates/rhel-current
      Type: String
      Value: 
        Ref: ReleaseDateRHELCurrentAMI
  EKSCurrentAMIParameter:
    Type: AWS::SSM::Parameter
    Properties:
      DataType: aws:ec2:image
      Description: EKS Current AMI ID
      AllowedPattern: "^ami-[a-z0-9]{17}$"
      Name: /cti/ami/ami-ids/eks-current
      Type: String
      Value: 
        Ref: EKSCurrentAMI
  EKSCurrentAMIReleaseDateParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: EKS Current AMI ID
      AllowedPattern: "^202[3-9]-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$"
      Name: /cti/ami/release-dates/eks-current
      Type: String
      Value: 
        Ref: ReleaseDateEKSCurrentAMI
  LustreCurrentAMIParameter:
    Type: AWS::SSM::Parameter
    Properties:
      DataType: aws:ec2:image
      Description: Lustre Current AMI ID
      AllowedPattern: "^ami-[a-z0-9]{17}$"
      Name: /cti/ami/ami-ids/lustre-current
      Type: String
      Value: 
        Ref: LustreCurrentAMI
  LustreCurrentAMIReleaseDateParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: Lustre Current AMI ID
      AllowedPattern: "^202[3-9]-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$"
      Name: /cti/ami/release-dates/lustre-current
      Type: String
      Value: 
        Ref: ReleaseDateLustreCurrentAMI
  ForensicCurrentAMIParameter:
    Type: AWS::SSM::Parameter
    Properties:
      DataType: aws:ec2:image
      Description: Forensic Current AMI ID
      AllowedPattern: "^ami-[a-z0-9]{17}$"
      Name: /cti/ami/ami-ids/forensic-current
      Type: String
      Value: 
        Ref: ForensicCurrentAMI
  ForensicCurrentAMIReleaseDateParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: Forensic Current AMI ID
      AllowedPattern: "^202[3-9]-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$"
      Name: /cti/ami/release-dates/forensic-current
      Type: String
      Value: 
        Ref: ReleaseDateForensicCurrentAMI
  RHELPreviousAMIParameter:
    Type: AWS::SSM::Parameter
    Properties:
      DataType: aws:ec2:image
      Description: RHEL Previous AMI ID
      AllowedPattern: "^ami-[a-z0-9]{17}$"
      Name: /cti/ami/ami-ids/rhel-previous
      Type: String
      Value: 
        Ref: RHELPreviousAMI
  RHELPreviousAMIReleaseDateParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: RHEL Previous AMI ID
      AllowedPattern: "^202[3-9]-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$"
      Name: /cti/ami/release-dates/rhel-previous
      Type: String
      Value: 
        Ref: ReleaseDateRHELPreviousAMI
  EKSPreviousAMIParameter:
    Type: AWS::SSM::Parameter
    Properties:
      DataType: aws:ec2:image
      Description: EKS Previous AMI ID
      AllowedPattern: "^ami-[a-z0-9]{17}$"
      Name: /cti/ami/ami-ids/eks-previous
      Type: String
      Value: 
        Ref: EKSPreviousAMI
  EKSPreviousAMIReleaseDateParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: EKS Previous AMI ID
      AllowedPattern: "^202[3-9]-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$"
      Name: /cti/ami/release-dates/eks-previous
      Type: String
      Value: 
        Ref: ReleaseDateEKSPreviousAMI
  LustrePreviousAMIParameter:
    Type: AWS::SSM::Parameter
    Properties:
      DataType: aws:ec2:image
      Description: Lustre Previous AMI ID
      AllowedPattern: "^ami-[a-z0-9]{17}$"
      Name: /cti/ami/ami-ids/lustre-previous
      Type: String
      Value: 
        Ref: LustrePreviousAMI
  LustrePreviousAMIReleaseDateParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: Lustre Previous AMI ID
      AllowedPattern: "^202[3-9]-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$"
      Name: /cti/ami/release-dates/lustre-previous
      Type: String
      Value: 
        Ref: ReleaseDateLustrePreviousAMI
  ForensicPreviousAMIParameter:
    Type: AWS::SSM::Parameter
    Properties:
      DataType: aws:ec2:image
      Description: Forensic Previous AMI ID
      AllowedPattern: "^ami-[a-z0-9]{17}$"
      Name: /cti/ami/ami-ids/forensic-previous
      Type: String
      Value: 
        Ref: ForensicPreviousAMI
  ForensicPreviousAMIReleaseDateParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: Forensic Previous AMI ID
      AllowedPattern: "^202[3-9]-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$"
      Name: /cti/ami/release-dates/forensic-previous
      Type: String
      Value: 
        Ref: ReleaseDateForensicPreviousAMI

  AMIRepaveKMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: AMI Repave Encryption CMK
      Enabled: true
      EnableKeyRotation: true
      KeyPolicy: 
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
          Action: 'kms:*'
          Resource: '*'
        - Sid: Enable AWS Services Access
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
            - sqs.amazonaws.com
          Action:
          - kms:Encrypt
          - kms:Decrypt
          - kms:ReEncrypt*
          - kms:GenerateDateKey*
          - kms:GenerateDataKeyWithoutPlainText
          - kms:DescribeKey
          Resource: "*"
  AMIRepaveKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${AMIRepaveKMSKeyName}"
      TargetKeyId: !Ref AMIRepaveKMSKey
  RepaveSqs:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !Ref AMIRepaveKMSKey
      QueueName: !Ref AMIRepaveSQSName
      VisibilityTimeout: !Ref VisibilityTimeout
      RedrivePolicy: 
        deadLetterTargetArn: !GetAtt RepaveDlqSqs.Arn
        maxReceiveCount: 5 
  RepaveDlqSqs:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !Ref AMIRepaveKMSKey
      QueueName: !Ref AMIRepaveDLQName
      VisibilityTimeout: 
        Ref: VisibilityTimeout
  LambdaDlq:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !Ref AMIRepaveKMSKey
      QueueName: !Ref LambdaDLQName
  LambdaScheduler:
    Type: 'AWS::Events::Rule'
    Properties:
      ScheduleExpression: "cron(0 22 * * ? *)"
      State: ENABLED
      Targets:
      - Arn: !GetAtt RepaveLambda.Arn
        Id: RepaveLambdaRule
  InvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt RepaveLambda.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt LambdaScheduler.Arn
  LambdaFunctionEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt RepaveSqs.Arn
      FunctionName: !GetAtt RefreshLambda.Arn
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AMIRepaveLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
        - PolicyName: allowLambdaLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
        - PolicyName: allowKMSDecrypt
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - kms:Decrypt
              - kms:GenerateDataKey
              Resource: !GetAtt AMIRepaveKMSKey.Arn
        - PolicyName: allowSSMActions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - ssm:GetParametersByPath
              - ssm:GetParameter
              Resource: 
              - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/cti/*'
        - PolicyName: allowASGActions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - autoscaling:DescribeAutoScalingInstances
              - autoscaling:DescribeAutoScalingGroups
              - autoscaling:DescribeTags
              Resource: '*'
        - PolicyName: allowEC2InstanceActions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - ec2:DescribeInstances
              - ec2:TerminateInstances
              - ec2:DescribeTags
              - ec2:DescribeLaunchTemplateVersions
              Resource: '*'
        - PolicyName: allowSqs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
              - sqs:SendMessage
              - sqs:GetQueueAttributes
              - sqs:ChangeMessageVisibility
              Resource: 
              - !GetAtt RepaveSqs.Arn
              - !GetAtt RepaveDlqSqs.Arn
              - !GetAtt LambdaDlq.Arn
  RepaveLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code: 
        ZipFile: |
          import json
          import boto3
          import logging
          from math import ceil
          from os import environ
          from datetime import datetime
          from botocore.exceptions import ClientError
          LOGGER = logging.getLogger(__name__)
          LOGGER.setLevel(logging.getLevelName(environ.get("LogLevel", "DEBUG")))
          def get_ssm_parameters_by_path(parameter_path, recursive=True, with_decryption=True):
              client = boto3.client("ssm")
              parameters = []
              response = client.get_parameters_by_path(Path=parameter_path, Recursive=recursive, WithDecryption=with_decryption)
              while True:
                  parameters.extend(response["Parameters"])
                  if "NextToken" in response:
                      response = client.get_parameters_by_path(Path=parameter_path, Recursive=recursive, WithDecryption=with_decryption, NextToken=response["NextToken"])
                      parameters.extend(response["Parameters"])
                  else:
                      break
              return parameters
          def send_message_to_queue(queue_url, message_body):
              client = boto3.client("sqs")
              LOGGER.info(f"Sending message to queue with message-body: {message_body}")
              client.send_message(QueueUrl=queue_url, MessageBody=message_body)
          def get_asgs(asg_name=[]):
              client = boto3.client("autoscaling")
              all_asgs = []
              response = client.describe_auto_scaling_groups(AutoScalingGroupNames=asg_name)
              while True:
                  all_asgs.extend(response["AutoScalingGroups"])
                  if "NextToken" in response:
                      response = client.describe_auto_scaling_groups(NextToken=response["NextToken"])
                      all_asgs.extend(response["AutoScalingGroups"])
                  else:
                      break
              return all_asgs
          def is_lt_uses_ssm_parameter(lt_id, version):
              client = boto3.client("ec2")
              response = client.describe_launch_template_versions(LaunchTemplateId=lt_id, Versions=[version])
              if ("resolve:ssm:"in response["LaunchTemplateVersions"][0]["LaunchTemplateData"]["ImageId"]):
                  return response["LaunchTemplateVersions"][0]["LaunchTemplateData"]["ImageId"].split(':')[-1]
          def get_asg_instances(asg_name):
              client = boto3.client("autoscaling")
              asg_instance_ids = []
              response = client.describe_auto_scaling_instances()
              while True:
                  asg_instance_ids.extend([inst["InstanceId"] for inst in response["AutoScalingInstances"] if inst["AutoScalingGroupName"] == asg_name])
                  if "NextToken" in response:
                      response = client.describe_auto_scaling_instances(NextToken=response["NextToken"])
                      asg_instance_ids.extend([inst["InstanceId"] for inst in response["AutoScalingInstances"] if inst["AutoScalingGroupName"] == asg_name])
                  else:
                      break
              return asg_instance_ids
          def get_asg_instances_to_terminate(instance_ids, ami_id):
              client = boto3.client("ec2")
              response = client.describe_instances(InstanceIds=instance_ids)
              instances_to_terminate = [instance["InstanceId"] for instance in response["Reservations"][0]["Instances"] if instance["ImageId"] != ami_id]
              return instances_to_terminate
          def lambda_handler(event, context):
              try:
                  LOGGER.info("Received Event: %s", event)
                  grace_days = environ.get("GracePeriodDays", 45)
                  staggered_deploy = environ.get("StaggeredDeploymentPercentage", 33)
                  queue_url = environ.get("AsgSqsQueueUrl")
                  ami_ids_info = get_ssm_parameters_by_path(environ.get("CitiAmiIdPath", "/cti/ami/ami-ids/"))
                  release_dates_info = get_ssm_parameters_by_path(environ.get("CitiAmiReleaseDatePath", "/cti/ami/release-dates/"))
                  ami_map = {item["Name"]:item["Value"] for item in ami_ids_info}
                  release_map = {item["Name"]:item["Value"] for item in release_dates_info}
                  parameter_name_ami_id_map = {}
                  for k,v in release_map.items():
                      utc_now = datetime.utcnow().isoformat()
                      today = datetime.strptime(utc_now.split('T')[0], "%Y-%m-%d")
                      ami_release_date = datetime.strptime(v, "%Y-%m-%d")
                      if (today-ami_release_date).days > int(grace_days):
                          ami_id_path = f"/cti/ami/ami-ids/{k.split('/')[-1]}"
                          if ami_id_path in ami_map:
                              parameter_name_ami_id_map[ami_id_path] = ami_map[ami_id_path]
                  LOGGER.info(f"The following AMI-IDs release date has crossed the Grace Period days: {parameter_name_ami_id_map}")
                  asgs = get_asgs()
                  image_path_asg_name_map = {}
                  for asg in asgs:
                      if "LaunchTemplate" in asg:
                          asg_image_path = is_lt_uses_ssm_parameter(asg["LaunchTemplate"]["LaunchTemplateId"],asg["LaunchTemplate"]["Version"])
                          if asg_image_path and asg_image_path in parameter_name_ami_id_map:
                              asg_instances = get_asg_instances(asg["AutoScalingGroupName"])
                              instances_to_terminate = get_asg_instances_to_terminate(asg_instances, parameter_name_ami_id_map[asg_image_path])
                              if len(instances_to_terminate) > 0:
                                  image_path_asg_name_map[asg[ "AutoScalingGroupName"]] = asg_image_path
                  LOGGER.info(f"ASG to Repave: {image_path_asg_name_map}")
                  LOGGER.info(f"Calculating % of ASGs with Staggered deployment %: {staggered_deploy}")
                  repave_today_count = ceil(len(asgs) * int(staggered_deploy) / 100)
                  if repave_today_count >= len(image_path_asg_name_map):
                      for asg in image_path_asg_name_map:
                          msg = {"Task": "ASGRefresh", "ASGName": asg}
                          send_message_to_queue(queue_url, json.dumps(msg))
                  else:
                      for i in range(repave_today_count):
                          msg = {"Task": "ASGRefresh", "ASGName": list(image_path_asg_name_map)[i]}
                          send_message_to_queue(queue_url, json.dumps(msg))
              except KeyError as ke:
                  LOGGER.error(f"KeyError: {ke}")
              except ClientError as ce:
                  LOGGER.error(f"Client-Error: {ce}")
              except BaseException as be:
                  LOGGER.error(f"Base Error: {be}")
      Description: AMI Repave Lambda
      FunctionName: AMIRepaveLambda
      Handler: index.lambda_handler
      MemorySize: 512
      Environment:
        Variables:
          LogLevel: DEBUG
          GracePeriodDays: 0
          StaggeredDeploymentPercentage: 33
          AsgSqsQueueUrl: !Ref RepaveSqs
          MinimumHealthPercentage: 70
      KmsKeyArn: !GetAtt AMIRepaveKMSKey.Arn
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.7
      Timeout: 900
      DeadLetterConfig:
        TargetArn: !GetAtt LambdaDlq.Arn
  RefreshLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code: 
        ZipFile: |
          import json
          import boto3
          import logging
          from math import ceil
          from os import environ
          from botocore.exceptions import ClientError
          LOGGER = logging.getLogger(__name__)
          LOGGER.setLevel(logging.getLevelName(environ.get("LogLevel", "DEBUG")))
          def get_ssm_parameters_by_path(parameter_path, recursive=True, with_decryption=True):
              client = boto3.client("ssm")
              parameters = []
              response = client.get_parameters_by_path(Path=parameter_path, Recursive=recursive, WithDecryption=with_decryption)
              while True:
                  parameters.extend(response["Parameters"])
                  if "NextToken" in response:
                      response = client.get_parameters_by_path(Path=parameter_path, Recursive=recursive, WithDecryption=with_decryption, NextToken=response["NextToken"])
                      parameters.extend(response["Parameters"])
                  else:
                      break
              return parameters
          def get_ssm_parameter(parameter_name, with_decryption=True):
              client = boto3.client("ssm")
              response = client.get_parameter(Name=parameter_name, WithDecryption=with_decryption)
              return response["Parameter"]
          def send_message_to_queue(sqs_queue_url, message_body):
              client = boto3.client("sqs")
              LOGGER.info(f"Sending message to queue with message-body: {message_body}")
              client.send_message(QueueUrl=sqs_queue_url, DelaySeconds=900, MessageBody=message_body)
          def delete_message_from_queue(sqs_queue_url, receipt_handle):
              client = boto3.client("sqs")
              client.detete_message(QueueUrl=sqs_queue_url, ReceiptHandle=receipt_handle)
          def terminate_instances(instance_ids):
              client = boto3.client("ec2")
              LOGGER.info("Terminating the following instances: %s",instance_ids)
              client.terminate_instances(InstanceIds=instance_ids)
          def get_asgs(asg_name=[]):
              client = boto3.client("autoscaling")
              all_asgs = []
              response = client.describe_auto_scaling_groups(AutoScalingGroupNames=asg_name)
              while True:
                  all_asgs.extend(response["AutoScalingGroups"])
                  if "NextToken" in response:
                      response = client.describe_auto_scaling_groups(NextToken=response["NextToken"])
                      all_asgs.extend(response["AutoScalingGroups"])
                  else:
                      break
              return all_asgs
          def is_lt_uses_ssm_parameter(lt_id, version="$Default"):
              client = boto3.client("ec2")
              response = client.describe_launch_template_versions(LaunchTemplateId=lt_id, Versions=[version])
              if ("resolve:ssm:" in response["LaunchTemplateVersions"][0]["LaunchTemplateData"]["ImageId"]):
                  return response["LaunchTemplateVersions"][0]["LaunchTemplateData"]["ImageId"].split(':')[-1]
          def get_asg_instances(asg_name):
              client = boto3.client("autoscaling")
              asg_instance_ids = []
              response = client.describe_auto_scaling_instances()
              while True:
                  asg_instance_ids.extend([inst["InstanceId"]for inst in response["AutoScalingInstances"]if inst["AutoScalingGroupName"] == asg_name])
                  if "NextToken" in response:
                      response = client.describe_auto_scaling_instances(NextToken=response["NextToken"])
                      asg_instance_ids.extend([inst["InstanceId"]for inst in response["AutoScalingInstances"]if inst["AutoScalingGroupName"] == asg_name])
                  else:
                      break
              return asg_instance_ids
          def get_asg_instances_to_terminate(instance_ids, ami_id):
              client = boto3.client("ec2")
              response = client.describe_instances(InstanceIds=instance_ids)
              instances_to_terminate = [instance["InstanceId"] for r in response["Reservations"] for instance in r['Instances'] if instance["ImageId"] != ami_id]
              return instances_to_terminate
          def lambda_handler(event, context):
              try:
                  record = json.loads(event['Records'][0]['body'].replace("\'",""))
                  LOGGER.info(f"Received Message: {record}")
                  asg_name = record["ASGName"]
                  refresh_run_count = int(record.get("ASGRefreshCount", 0))
                  min_health = environ.get("MinimumHealthPercentage", 70)
                  queue_url = environ.get("AsgSqsQueueUrl")
                  if record["Task"] == "ASGRefresh":
                      asg_data = get_asgs(asg_name=[asg_name])
                      asg_ssm_path = is_lt_uses_ssm_parameter(asg_data[0]["LaunchTemplate"]["LaunchTemplateId"],asg_data[0]["LaunchTemplate"]["Version"])
                      if asg_ssm_path:
                          asg_ami_id = get_ssm_parameter(asg_ssm_path)["Value"]
                          if asg_ami_id.startswith("ami-"):
                              for tag in asg_data[0]["Tags"]:
                                  if "Key" in tag and tag["Key"]=="MinimumHealthPercentage":
                                      min_health = tag["Value"]
                              asg_instances = get_asg_instances(asg_name)
                              instances_to_terminate = get_asg_instances_to_terminate(asg_instances, asg_ami_id)
                              LOGGER.info(f"Total ASG #: {len(asg_instances)}, Intances to Terminate: {instances_to_terminate}")
                              if instances_to_terminate:
                                  LOGGER.info(f"Calculating percentage of ASG Instances to Terminate with MinimumHealthPercentage: {min_health}")
                                  min_health = 1 if int(min_health)==0 else min_health
                                  instances_to_terminate_now = ceil(len(asg_instances) * int(min_health) / 100)
                                  LOGGER.info(f"Instances to Terminate Now: {instances_to_terminate_now}")
                                  if instances_to_terminate_now >= len(instances_to_terminate):
                                      terminate_instances(instances_to_terminate)
                                  else:
                                      terminate_instances(instances_to_terminate[:instances_to_terminate_now])
                                      #time.sleep(60)
                                      #new_inst_ids = get_asg_new_inst_ids(asg_name)
                                      msg = {"Task": "ASGRefresh", "ASGName": asg_name}
                                      send_message_to_queue(queue_url, json.dumps(msg))
                          else:
                              LOGGER.warn(f"ASG's SSM Parameter is not a valid AMI-ID: {asg_ami_id}")
                      else:
                          LOGGER.warn(f"ASG: {asg_name} LT not using SSM Parameter for AMI-ID")
              except KeyError as ke:
                  LOGGER.error(f"KeyError: {ke}")
              except ClientError as ce:
                  LOGGER.error(f"Client error: {ce}")
              except BaseException as be:
                  LOGGER.error(f"Error: {be}")
      Description: AMI Refresh Lambda
      FunctionName: AMIRefreshLambda
      Handler: index.lambda_handler
      MemorySize: 512
      Environment:
        Variables:
          AsgSqsQueueUrl: !Ref RepaveSqs
          MinimumHealthPercentage: 70
      KmsKeyArn: !GetAtt AMIRepaveKMSKey.Arn
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.7
      Timeout: 900
      DeadLetterConfig:
        TargetArn: !GetAtt LambdaDlq.Arn